/*This is an auto generated class, please do not edit this file!*/
/**
 * Class to create a Eci object
 * @category AliCloud
 */
class ALI_Container {
  /**
   * @param {module} alisdk ali SDK
   * @param {string} accessKeyId SDK secrets accessKeyId
   * @param {string} accessKeySecret SDK secrets accessKeySecret
   */
  constructor(alisdk, accessKeyId, accessKeySecret) {
    this._ali = alisdk;
    this._instance = new this._ali(accessKeyId, accessKeySecret);
    this._eci = this._instance.eci;
  }
  /**
   * Trigers the createContainerGroup function of Eci
   * @param {ICreateContainerGroup} params - Data required for createContainerGroup
   * @returns {Promise<createContainerGroupResponse>}
   */
  create(params) {
    return new Promise((resolve, reject) => {
      this._eci
        .createContainerGroup(params)
        .then(data => resolve(data))
        .catch(err => reject(err));
    });
  }
  /**
   * Trigers the deleteContainerGroup function of Eci
   * @param {IDeleteContainerGroup} params - Data required for deleteContainerGroup
   * @returns {Promise<deleteContainerGroupResponse>}
   */
  delete(params) {
    return new Promise((resolve, reject) => {
      this._eci
        .deleteContainerGroup(params)
        .then(data => resolve(data))
        .catch(err => reject(err));
    });
  }
  /**
   * Trigers the restartContainerGroup function of Eci
   * @param {IRestartContainerGroup} params - Data required for restartContainerGroup
   * @returns {Promise<restartContainerGroupResponse>}
   */
  restart(params) {
    return new Promise((resolve, reject) => {
      this._eci
        .restartContainerGroup(params)
        .then(data => resolve(data))
        .catch(err => reject(err));
    });
  }
  /**
   * Trigers the describeContainerGroups function of Eci
   * @param {IDescribeContainerGroup} params - Data required for describeContainerGroups
   * @returns {Promise<describeContainerGroupsResponse>}
   */
  list(params) {
    return new Promise((resolve, reject) => {
      this._eci
        .describeContainerGroups(params)
        .then(data => resolve(data))
        .catch(err => reject(err));
    });
  }
}
module.exports = ALI_Container;
