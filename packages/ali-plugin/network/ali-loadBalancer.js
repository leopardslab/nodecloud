/*This is an auto generated class, please do not edit this file!*/
/**
 * Class to create a Slb object
 * @category AliCloud
 */
class ALI_LoadBalancer {
  /**
   * @param {module} alisdk ali SDK
   * @param {string} accessKeyId SDK secrets accessKeyId
   * @param {string} accessKeySecret SDK secrets accessKeySecret
   */
  constructor(alisdk, accessKeyId, accessKeySecret) {
    this._ali = alisdk;
    this._instance = new this._ali(accessKeyId, accessKeySecret);
    this._slb = this._instance.slb;
  }
  /**
   * Trigers the createLoadBalancerInstance function of Slb
   * @param {StringKeyword} regionId - Data required for createLoadBalancerInstance
   * @param {StringKeyword} loadBalancerName - Data required for createLoadBalancerInstance
   * @param {StringKeyword} loadBalancerSpec - Data required for createLoadBalancerInstance
   * @param {AnyKeyword} params - Data required for createLoadBalancerInstance
   * @returns {Promise<createLoadBalancerInstanceResponse>}
   */
  create(regionId, loadBalancerName, loadBalancerSpec, params = undefined) {
    return new Promise((resolve, reject) => {
      this._slb
        .createLoadBalancerInstance(
          regionId,
          loadBalancerName,
          loadBalancerSpec,
          params
        )
        .then(data => resolve(data))
        .catch(err => reject(err));
    });
  }
  /**
   * Trigers the describeLoadBalancers function of Slb
   * @param {StringKeyword} regionId - Data required for describeLoadBalancers
   * @param {AnyKeyword} params - Data required for describeLoadBalancers
   * @returns {Promise<describeLoadBalancersResponse>}
   */
  list(regionId, params = undefined) {
    return new Promise((resolve, reject) => {
      this._slb
        .describeLoadBalancers(regionId, params)
        .then(data => resolve(data))
        .catch(err => reject(err));
    });
  }
  /**
   * Trigers the describeLoadBalancerAttribute function of Slb
   * @param {StringKeyword} regionId - Data required for describeLoadBalancerAttribute
   * @param {StringKeyword} loadBalancerId - Data required for describeLoadBalancerAttribute
   * @param {AnyKeyword} params - Data required for describeLoadBalancerAttribute
   * @returns {Promise<describeLoadBalancerAttributeResponse>}
   */
  describe(regionId, loadBalancerId, params = undefined) {
    return new Promise((resolve, reject) => {
      this._slb
        .describeLoadBalancerAttribute(regionId, loadBalancerId, params)
        .then(data => resolve(data))
        .catch(err => reject(err));
    });
  }
  /**
   * Trigers the deleteLoadBalancer function of Slb
   * @param {StringKeyword} loadBalancerId - Data required for deleteLoadBalancer
   * @param {AnyKeyword} params - Data required for deleteLoadBalancer
   * @returns {Promise<deleteLoadBalancerResponse>}
   */
  delete(loadBalancerId, params = undefined) {
    return new Promise((resolve, reject) => {
      this._slb
        .deleteLoadBalancer(loadBalancerId, params)
        .then(data => resolve(data))
        .catch(err => reject(err));
    });
  }
}
module.exports = ALI_LoadBalancer;
