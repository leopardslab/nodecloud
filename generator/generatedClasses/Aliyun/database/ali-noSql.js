/*This is an auto generated class, please do not edit this file!*/
/**
* Class to create a Nosql object
* @category AliCloud
*/
class ALI_NoSql {
    /**
     * @param {module} alisdk ali SDK
     * @param {string} accessKeyId SDK secrets accessKeyId
     * @param {string} accessKeySecret SDK secrets accessKeySecret
     */
    constructor(alisdk, accessKeyId, accessKeySecret) {
        this._ali = alisdk;
        this._instance = new this._ali(accessKeyId, accessKeySecret);
        this._nosql = this._instance.nosql;
    }
    /**
    * Trigers the createDBInstance function of Nosql
    * @param {ICreateDBInstance} params - Data required for createDBInstance
    * @returns {Promise<createDBInstanceResponse>}
    */
    createInstance(params) {
        return new Promise((resolve, reject) => {
            this._nosql.createDBInstance(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the listDBInstances function of Nosql
    * @param {IDescribeDBInstances} params - Data required for listDBInstances
    * @returns {Promise<listDBInstancesResponse>}
    */
    listInstances(params) {
        return new Promise((resolve, reject) => {
            this._nosql.listDBInstances(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the describeDBInstance function of Nosql
    * @param {IDescribeDBInstanceAttribute} params - Data required for describeDBInstance
    * @returns {Promise<describeDBInstanceResponse>}
    */
    describeInstance(params) {
        return new Promise((resolve, reject) => {
            this._nosql.describeDBInstance(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the restartDBInstance function of Nosql
    * @param {IRestartDBInstance} params - Data required for restartDBInstance
    * @returns {Promise<restartDBInstanceResponse>}
    */
    restartInstance(params) {
        return new Promise((resolve, reject) => {
            this._nosql.restartDBInstance(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the deleteDBInstance function of Nosql
    * @param {IDeleteDBInstance} params - Data required for deleteDBInstance
    * @returns {Promise<deleteDBInstanceResponse>}
    */
    deleteInstance(params) {
        return new Promise((resolve, reject) => {
            this._nosql.deleteDBInstance(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
}
module.exports = ALI_NoSql;
