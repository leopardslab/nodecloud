/*This is an auto generated class, please do not edit this file!*/
/**
* Class to create a Ecs object
* @category AliCloud
*/
class ALI_ComputeInstance {
    /**
     * @param {module} alisdk ali SDK
     * @param {string} accessKeyId SDK secrets accessKeyId
     * @param {string} accessKeySecret SDK secrets accessKeySecret
     */
    constructor(alisdk, accessKeyId, accessKeySecret) {
        this._ali = alisdk;
        this._instance = new this._ali(accessKeyId, accessKeySecret);
        this._ecs = this._instance.ecs;
    }
    /**
    * Trigers the createInstance function of Ecs
    * @param {ICreateInstanceParams} params - Data required for createInstance
    * @returns {Promise<createInstanceResponse>}
    */
    create(params) {
        return new Promise((resolve, reject) => {
            this._ecs.createInstance(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the listInstances function of Ecs
    * @param {IDescribeInstancesParams} params - Data required for listInstances
    * @returns {Promise<listInstancesResponse>}
    */
    list(params) {
        return new Promise((resolve, reject) => {
            this._ecs.listInstances(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the startInstance function of Ecs
    * @param {IStartInstanceParams} params - Data required for startInstance
    * @returns {Promise<startInstanceResponse>}
    */
    start(params) {
        return new Promise((resolve, reject) => {
            this._ecs.startInstance(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the stopInstance function of Ecs
    * @param {IStopInstanceParams} params - Data required for stopInstance
    * @returns {Promise<stopInstanceResponse>}
    */
    stop(params) {
        return new Promise((resolve, reject) => {
            this._ecs.stopInstance(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the listInstanceTypes function of Ecs
    * @param {IListInstanceTypesParams} params - Data required for listInstanceTypes
    * @returns {Promise<listInstanceTypesResponse>}
    */
    listInstanceTypes(params) {
        return new Promise((resolve, reject) => {
            this._ecs.listInstanceTypes(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the deleteInstance function of Ecs
    * @param {IDeleteInstanceParams} params - Data required for deleteInstance
    * @returns {Promise<deleteInstanceResponse>}
    */
    destroy(params) {
        return new Promise((resolve, reject) => {
            this._ecs.deleteInstance(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
    /**
    * Trigers the describeImages function of Ecs
    * @param {IDescribeImagesParams} params - Data required for describeImages
    * @returns {Promise<describeImagesResponse>}
    */
    describeImages(params) {
        return new Promise((resolve, reject) => {
            this._ecs.describeImages(params)
                .then(data => resolve(data))
                .catch(err => reject(err));
        });
    }
}
module.exports = ALI_ComputeInstance;
